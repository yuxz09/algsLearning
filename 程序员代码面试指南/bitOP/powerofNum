/*
判断一个32位正整数是不是2的幂，4的幂

如果一个数是2的某次方，这个数的二进制只有一个1，才是2的某次方

如何拿一个数字num的最右侧的1  ===>  num & (~num+1)


 */

#include <iostream>
using namespace std;


bool way1(int n)
{
	//目的，把n中的1破开，如果只有1个1，那么破开后，原位置1的变为0，
	//原位置后面是0的变为1，&&的结果就是0，所以n是2的某次方
	
	//如果n不只有1一个1，破完这个1，结果里还会有其它的1，所以n不是2的某次方
	//0011000
	//0001100
	if( (n & (n-1)) == 0)
	{
		return true;
	}
	return false;
}

//判断一个32位正整数是不是4的幂
bool way2(int n)
{
	//n的二进制只有一个1，并且这个1都在从右向左第1，3，5，7...位
	//0x55555555 每一个5代表4个二进制位0101  Ox表示十六进制
	if((n & (n-1)) == 0 && (n & 0x55555555) != 0)
	{
		return true;
	}
	return false;
}

int main()
{
	int a = 16;
	int b = 64;

	cout << way1(a) << endl;
	cout << way2(b) << endl;

}
